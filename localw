#!/usr/bin/env bash
set -ex

#-#
TAGS=""
COMMAND=""
CHECKS="${CHECKS:-1}"
PYTHON_VENV="${PYTHON_VENV:-}"
BINARY_NAME="${BINARY_NAME:-}"
CONTAINER="${CONTAINER:-fedora-toolbox}"
SUDO="${SUDO:-0}"
EXPORT_LOCATION="${EXPORT_LOCATION:-$HOME/.local/bin}"
EXTRA_OPTIONS="${EXTRA_OPTIONS:-}"
CONTAINER_MANAGER="${CONTAINER_MANAGER:-toolbox}"
#-#
print_help() {
    cat << EOF
Usage: "$(basename "$1")" [OPTION ...] -b [FILE] -e [DIRECTORY]
Wraps a binary into a script so that it'll run with other arguments applied when in PATH

    -r, --rootfull - runs as root
    -p, --python-path - supplied path for python3
    -c, --container - adds wrapper for container managers accordingly
    -b, --bin - the binary that will be used
    -e, --export-location - the export location that will be used
    -o, --options - extra options passed to the binary
    -h, --help, --usage - shows this help
EOF
}
has() { command -v "$1" &> '/dev/null' ;}
add_tag() { TAGS="$* $TAGS" ;}
push_back() { COMMAND="$* $COMMAND" ;}
error() { 
    [ "$CHECKS" = 0 ] && printf "%s\n" "$*" > /dev/null && return 0
    printf "%s\n" "$*" >&2 
}
blocking_error() { 
    error "$*" 
    [ "$CHECKS" = 1 ] && exit 1 
}
#-#
add_tag 'local-wrapper'

while :; do
    case "$1" in
        "-r"|"--rootfull")
            SUDO=1
            add_tag "root_access"
            shift
            ;;
        "--rootfull-container")
            #SUDO_CONTAINER=1
            add_tag "rootfull_container"
            shift
            ;;
        "-p"|"--python-path")
            [ -z "$2" ] && continue
            PYTHON_VENV="$2" 
            add_tag "python_module" 
            shift 
            shift
            ;;
        -c|--container)
            [ -z "$2" ] && continue
            CONTAINER="$2" 
            add_tag "toolbox_container" 
            shift 
            shift
            ;;
        -b|--bin)
            [ -z "$2" ] && continue
            BINARY_NAME="$2" 
            shift 
            shift
            ;;
        -e|--export)
            [ -z "$2" ] && continue
            EXPORT_LOCATION="$2"
            shift 
            shift
            ;;
        -o|--options)
            [ -z "$2" ] && continue
            EXTRA_OPTIONS="$2" 
            shift 
            shift
            ;;
        --no-checks)
            CHECKS=0
            shift
            ;;
        -h|--help|--usage)
            print_help "$0" ; exit 0
            ;;
        -*)
            blocking_error "Unknown option $1"
            ;;
        *)
            break
            ;;
    esac
done

EXPORT_LOCATION="${EXPORT_LOCATION}/${BINARY_NAME##.*}"
push_back "$BINARY_NAME"

[ -z "$BINARY_NAME" ] && blocking_error "Binary name was not defined, specify it with \"-b\""
[ -z "$EXPORT_LOCATION" ] && blocking_error "Please specify an export location"
[ ! -d "$EXPORT_LOCATION" ] && blocking_error "The export location must be an existing directory"

if [ -n "$PYTHON_VENV" ] ; then
    if ! has "$PYTHON_VENV" ; then
        error "Python3 interpreter not found: $PYTHON_VENV"
    fi
    
    push_back "$PYTHON_VENV" '-m'
fi

if [ -n "$CONTAINER" ] ; then
    if ! has "${CONTAINER_BACKEND-/usr/bin/podman}" ; then
        error "Container backend could not be found: ${CONTAINER_BACKEND-podman}"
    elif ! "${CONTAINER_BACKEND:-/usr/bin/podman}" container exists "${CONTAINER}" ; then
        error "Container does not exist: ${CONTAINER}"
    fi

    case "$(basename "${CONTAINER_MANAGER}")" in
        "toolbox")
            push_back "${CONTAINER_MANAGER:-/usr/bin/toolbox}" run -c "${CONTAINER}" "--"
        ;;
        "distrobox")
            push_back "${CONTAINER_MANAGER}" "enter" "${CONTAINER}" "--"
        ;;
        "apx")
            push_back "${CONTAINER_MANAGER:-/usr/bin/apx}" run
        ;;
        *)
            error "Toolbox binary not found in path"
        ;;
    esac
fi

[ "$SUDO" = 1 ] && push_back "${SUDO_PROGRAM-sudo}"
[ -n "$EXTRA_OPTIONS" ] && COMMAND="$COMMAND $EXTRA_OPTIONS"

printf "#!/bin/sh\n# %s\n%s \$@" "$TAGS" "${COMMAND}"